// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: stores.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StoresAPIClient is the client API for StoresAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoresAPIClient interface {
	// Get all stores
	ListStores(ctx context.Context, in *ListStoresRequest, opts ...grpc.CallOption) (*ListStoresResponse, error)
	// Get store by product id
	GetStoreByProductId(ctx context.Context, in *GetStoreByProductIdRequest, opts ...grpc.CallOption) (*GetStoreByProductIdResponse, error)
	// Get store by id.
	GetStore(ctx context.Context, in *GetStoreRequest, opts ...grpc.CallOption) (*GetStoreResponse, error)
	// Add new store.
	AddStore(ctx context.Context, in *AddStoreRequest, opts ...grpc.CallOption) (*AddStoreResponse, error)
	// Update store.
	UpdateStore(ctx context.Context, in *UpdateStoreRequest, opts ...grpc.CallOption) (*UpdateStoreResponse, error)
}

type storesAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewStoresAPIClient(cc grpc.ClientConnInterface) StoresAPIClient {
	return &storesAPIClient{cc}
}

func (c *storesAPIClient) ListStores(ctx context.Context, in *ListStoresRequest, opts ...grpc.CallOption) (*ListStoresResponse, error) {
	out := new(ListStoresResponse)
	err := c.cc.Invoke(ctx, "/pb.storesAPI/ListStores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storesAPIClient) GetStoreByProductId(ctx context.Context, in *GetStoreByProductIdRequest, opts ...grpc.CallOption) (*GetStoreByProductIdResponse, error) {
	out := new(GetStoreByProductIdResponse)
	err := c.cc.Invoke(ctx, "/pb.storesAPI/GetStoreByProductId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storesAPIClient) GetStore(ctx context.Context, in *GetStoreRequest, opts ...grpc.CallOption) (*GetStoreResponse, error) {
	out := new(GetStoreResponse)
	err := c.cc.Invoke(ctx, "/pb.storesAPI/GetStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storesAPIClient) AddStore(ctx context.Context, in *AddStoreRequest, opts ...grpc.CallOption) (*AddStoreResponse, error) {
	out := new(AddStoreResponse)
	err := c.cc.Invoke(ctx, "/pb.storesAPI/AddStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storesAPIClient) UpdateStore(ctx context.Context, in *UpdateStoreRequest, opts ...grpc.CallOption) (*UpdateStoreResponse, error) {
	out := new(UpdateStoreResponse)
	err := c.cc.Invoke(ctx, "/pb.storesAPI/UpdateStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoresAPIServer is the server API for StoresAPI service.
// All implementations should embed UnimplementedStoresAPIServer
// for forward compatibility
type StoresAPIServer interface {
	// Get all stores
	ListStores(context.Context, *ListStoresRequest) (*ListStoresResponse, error)
	// Get store by product id
	GetStoreByProductId(context.Context, *GetStoreByProductIdRequest) (*GetStoreByProductIdResponse, error)
	// Get store by id.
	GetStore(context.Context, *GetStoreRequest) (*GetStoreResponse, error)
	// Add new store.
	AddStore(context.Context, *AddStoreRequest) (*AddStoreResponse, error)
	// Update store.
	UpdateStore(context.Context, *UpdateStoreRequest) (*UpdateStoreResponse, error)
}

// UnimplementedStoresAPIServer should be embedded to have forward compatible implementations.
type UnimplementedStoresAPIServer struct {
}

func (UnimplementedStoresAPIServer) ListStores(context.Context, *ListStoresRequest) (*ListStoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStores not implemented")
}
func (UnimplementedStoresAPIServer) GetStoreByProductId(context.Context, *GetStoreByProductIdRequest) (*GetStoreByProductIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoreByProductId not implemented")
}
func (UnimplementedStoresAPIServer) GetStore(context.Context, *GetStoreRequest) (*GetStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStore not implemented")
}
func (UnimplementedStoresAPIServer) AddStore(context.Context, *AddStoreRequest) (*AddStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStore not implemented")
}
func (UnimplementedStoresAPIServer) UpdateStore(context.Context, *UpdateStoreRequest) (*UpdateStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStore not implemented")
}

// UnsafeStoresAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoresAPIServer will
// result in compilation errors.
type UnsafeStoresAPIServer interface {
	mustEmbedUnimplementedStoresAPIServer()
}

func RegisterStoresAPIServer(s grpc.ServiceRegistrar, srv StoresAPIServer) {
	s.RegisterService(&StoresAPI_ServiceDesc, srv)
}

func _StoresAPI_ListStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoresAPIServer).ListStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.storesAPI/ListStores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoresAPIServer).ListStores(ctx, req.(*ListStoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoresAPI_GetStoreByProductId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoreByProductIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoresAPIServer).GetStoreByProductId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.storesAPI/GetStoreByProductId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoresAPIServer).GetStoreByProductId(ctx, req.(*GetStoreByProductIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoresAPI_GetStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoresAPIServer).GetStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.storesAPI/GetStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoresAPIServer).GetStore(ctx, req.(*GetStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoresAPI_AddStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoresAPIServer).AddStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.storesAPI/AddStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoresAPIServer).AddStore(ctx, req.(*AddStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoresAPI_UpdateStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoresAPIServer).UpdateStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.storesAPI/UpdateStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoresAPIServer).UpdateStore(ctx, req.(*UpdateStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StoresAPI_ServiceDesc is the grpc.ServiceDesc for StoresAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StoresAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.storesAPI",
	HandlerType: (*StoresAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListStores",
			Handler:    _StoresAPI_ListStores_Handler,
		},
		{
			MethodName: "GetStoreByProductId",
			Handler:    _StoresAPI_GetStoreByProductId_Handler,
		},
		{
			MethodName: "GetStore",
			Handler:    _StoresAPI_GetStore_Handler,
		},
		{
			MethodName: "AddStore",
			Handler:    _StoresAPI_AddStore_Handler,
		},
		{
			MethodName: "UpdateStore",
			Handler:    _StoresAPI_UpdateStore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stores.proto",
}
